summary(salary_df)
ggplot(data = salary_df, aes(y = Salary)) +
geom_boxplot() +
scale_y_continuous(limits = c(0, 1000000))
ggplot(data = salary_df, aes(x = openess_to_experience,
y = Salary)) +
geom_point() +
scale_y_continuous(limits = c(0, 1000000))
View(salary_df)
ggplot(data = salary_df, aes(y = Salary)) +
geom_boxplot() +
scale_y_continuous(limits = c(0, 1000000))
rm(list = ls())
library(ggplot2)
library(corrgram)
library(gridExtra)
library(caret)
## read data
salary_df <- read.csv("Engineering_graduate_salary.csv")
## structure of dataframe
str(salary_df)
## statistical summary
summary(salary_df)
ggplot(data = salary_df, aes(y = Salary)) +
geom_boxplot() +
scale_y_continuous(limits = c(0, 1000000))
ggplot(data = salary_df, aes(x = openess_to_experience,
y = Salary)) +
geom_point() +
scale_y_continuous(limits = c(0, 1000000))
scale_y_continuous(limits = c(0, 1000000))
import matplotlib.pyplot as plt
rm(list = ls())
library(ggplot2)
library(corrgram)
library(gridExtra)
library(caret)
## read data
salary_df <- read.csv("data/Engineering_graduate_salary.csv")
rm(list = ls())
library(ggplot2)
library(corrgram)
library(gridExtra)
library(caret)
## read data
salary_df <- read.csv("Engineering_graduate_salary.csv")
## read data
salary_df <- read.csv("Engineering_graduate_salary.csv")
## structure of dataframe
str(salary_df)
df = pd.read_csv("Engineering_graduate_salary.csv")
import matplotlib.pyplot as plt
rm(list = ls())
library(ggplot2)
library(corrgram)
library(gridExtra)
library(caret)
## read data
salary_df <- read.csv("data/Engineering_graduate_salary.csv")
rm(list = ls())
library(ggplot2)
library(corrgram)
library(gridExtra)
library(caret)
## read data
salary_df <- read.csv("Engineering_graduate_salary.csv")
## read data
salary_df <- read.csv("Engineering_graduate_salary.csv")
## structure of dataframe
str(salary_df)
## statistical summary
summary(salary_df)
ggplot(data = salary_df, aes(y = Salary)) +
geom_boxplot() +
scale_y_continuous(limits = c(0, 1000000))
ggplot(data = salary_df, aes(x = openess_to_experience,
y = Salary)) +
geom_point() +
scale_y_continuous(limits = c(0, 1000000))
View(salary_df)
ggplot(data = salary_df, aes(y = Salary)) +
geom_boxplot() +
scale_y_continuous(limits = c(0, 1000000))
rm(list = ls())
library(ggplot2)
library(corrgram)
library(gridExtra)
library(caret)
## read data
salary_df <- read.csv("Engineering_graduate_salary.csv")
## structure of dataframe
str(salary_df)
## statistical summary
summary(salary_df)
ggplot(data = salary_df, aes(y = Salary)) +
geom_boxplot() +
scale_y_continuous(limits = c(0, 1000000))
ggplot(data = salary_df, aes(x = openess_to_experience,
y = Salary)) +
geom_point() +
scale_y_continuous(limits = c(0, 1000000))
scale_y_continuous(limits = c(0, 1000000))
salary_df_num <- salary_df[ ,c(13, 17:34)]
r <- cor(salary_df_num)
corrgram(salary_df_num, order = TRUE,
upper.panel = panel.cor)
rm(list = ls())
library(ggplot2)
library(corrgram)
library(gridExtra)
library(caret)
## read data
salary_df <- read.csv("data/Engineering_graduate_salary.csv")
rm(list = ls())
library(ggplot2)
library(corrgram)
library(gridExtra)
library(caret)
## read data
salary_df <- read.csv("Engineering_graduate_salary.csv")
## read data
salary_df <- read.csv("Engineering_graduate_salary.csv")
## structure of dataframe
str(salary_df)
## statistical summary
summary(salary_df)
ggplot(data = salary_df, aes(y = Salary)) +
geom_boxplot() +
scale_y_continuous(limits = c(0, 1000000))
ggplot(data = salary_df, aes(x = openess_to_experience,
y = Salary)) +
geom_point() +
scale_y_continuous(limits = c(0, 1000000))
View(salary_df)
ggplot(data = salary_df, aes(y = Salary)) +
geom_boxplot() +
scale_y_continuous(limits = c(0, 1000000))
rm(list = ls())
library(ggplot2)
library(corrgram)
library(gridExtra)
library(caret)
## read data
salary_df <- read.csv("Engineering_graduate_salary.csv")
## structure of dataframe
str(salary_df)
## statistical summary
summary(salary_df)
ggplot(data = salary_df, aes(y = Salary)) +
geom_boxplot() +
scale_y_continuous(limits = c(0, 1000000))
ggplot(data = salary_df, aes(x = openess_to_experience,
y = Salary)) +
geom_point() +
scale_y_continuous(limits = c(0, 1000000))
scale_y_continuous(limits = c(0, 1000000))
rm(list = ls())
library(ggplot2)
library(corrgram)
library(gridExtra)
library(caret)
## read data
salary_df <- read.csv("Engineering_graduate_salary.csv")
rm(list = ls())
library(ggplot2)
library(corrgram)
library(gridExtra)
library(caret)
## read data
salary_df <- read.csv("Engineering_graduate_salary.csv")
## read data
salary_df <- read.csv("Engineering_graduate_salary.csv")
## structure of dataframe
str(salary_df)
\
salary_df_num <- salary_df[ ,c(13, 17:34)]
r <- cor(salary_df_num)
corrgram(salary_df_num, order = TRUE,
upper.panel = panel.cor)
## Get outliers
out_salary <- boxplot.stats(salary_df_num$Salary)$out
## Get index of outliers
out_idx <- which(salary_df_num$Salary %in% c(out_salary))
## remove outlier
salary_df_num <- salary_df_num[ -out_idx,]
boxplot.stats(salary_df_num$Salary)
## get index of NAs
idx_na_d <- which(is.na(salary_df_num$Domain))
## compute mean
mean_d <- mean(salary_df_num$Domain, na.rm = TRUE)
## input NAs with mean
salary_df_num$Domain[ idx_na_d ] <- mean_d
## get index of NAs
idx_na_cp <- which(is.na(salary_df_num$ComputerProgramming))
## compute mean
mean_cp <- mean(salary_df_num$ComputerProgramming, na.rm = TRUE)
## input NAs with mean
salary_df_num$ComputerProgramming[ idx_na_cp ] <- mean_cp
## get index of NAs
idx_na_electro <- which(is.na(salary_df_num$ElectronicsAndSemicon))
## compute mean
mean_electro <- mean(salary_df_num$ElectronicsAndSemicon, na.rm = TRUE)
## input NAs with mean
salary_df_num$ElectronicsAndSemicon[ idx_na_electro ] <- mean_electro
## get index of NAs
idx_na_cmptr <- which(is.na(salary_df_num$ComputerScience))
## compute mean
mean_cmptr <- mean(salary_df_num$ComputerScience, na.rm = TRUE)
## input NAs with mean
salary_df_num$ComputerScience[ idx_na_cmptr ] <- mean_cmptr
rm(list = ls())
library(ggplot2)
library(corrgram)
library(gridExtra)
library(caret)
## read data
salary_df <- read.csv("Engineering_graduate_salary.csv")
## read data
salary_df <- read.csv("Engineering_graduate_salary.csv")
## structure of dataframe
str(salary_df)
## statistical summary
summary(salary_df)
ggplot(data = salary_df, aes(y = Salary)) +
geom_boxplot() +
scale_y_continuous(limits = c(0, 1000000))
ggplot(data = salary_df, aes(x = openess_to_experience,
y = Salary)) +
geom_point() +
scale_y_continuous(limits = c(0, 1000000))
View(salary_df)
ggplot(data = salary_df, aes(y = Salary)) +
geom_boxplot() +
scale_y_continuous(limits = c(0, 1000000))
rm(list = ls())
library(ggplot2)
library(corrgram)
library(gridExtra)
library(caret)
## read data
salary_df <- read.csv("Engineering_graduate_salary.csv")
## structure of dataframe
str(salary_df)
## statistical summary
summary(salary_df)
ggplot(data = salary_df, aes(y = Salary)) +
geom_boxplot() +
scale_y_continuous(limits = c(0, 1000000))
ggplot(data = salary_df, aes(x = openess_to_experience,
y = Salary)) +
geom_point() +
scale_y_continuous(limits = c(0, 1000000))
scale_y_continuous(limits = c(0, 1000000))
salary_df_num <- salary_df[ ,c(13, 17:34)]
r <- cor(salary_df_num)
corrgram(salary_df_num, order = TRUE,
upper.panel = panel.cor)
## get index of NAs
idx_na_me <- which(is.na(salary_df_num$MechanicalEngg))
## compute mean
mean_me <- mean(salary_df_num$MechanicalEngg, na.rm = TRUE)
## input NAs with mean
salary_df_num$MechanicalEngg[ idx_na_me ] <- mean_me
## get index of NAs
idx_na_ee <- which(is.na(salary_df_num$ElectricalEngg))
## compute mean
mean_ee <- mean(salary_df_num$ElectricalEngg, na.rm = TRUE)
## input NAs with mean
salary_df_num$ElectricalEngg[ idx_na_ee ] <- mean_ee
## get index of NAs
idx_na_te <- which(is.na(salary_df_num$TelecomEngg))
## compute mean
mean_te <- mean(salary_df_num$TelecomEngg, na.rm = TRUE)
## input NAs with mean
salary_df_num$TelecomEngg[ idx_na_te ] <- mean_te
## get index of NAs
idx_na_ce <- which(is.na(salary_df_num$CivilEngg))
## compute mean
mean_ce <- mean(salary_df_num$CivilEngg, na.rm = TRUE)
## input NAs with mean
salary_df_num$CivilEngg[ idx_na_ce ] <- mean_ce
# Delete Column
salary_df$ID <- NULL
salary_df$DOB <- NULL
savehistory("C:/Users/excellent lap/Desktop/Team-Project-A170/.Rhistory")
dim(salary_df_num)
# for reproducible result
set.seed(2021)
m <- nrow(salary_df_num)
m
m_train <- m * 0.7
train_idx <- sample(m, m_train)
train_df <- salary_df_num[ train_idx, ]
test_df <- salary_df_num[ -train_idx, ]
savehistory("C:/Users/excellent lap/Desktop/Team-Project-A170/.Rhistory")
model.slr <- lm(formula = Salary ~ openess_to_experience,
data = train_df)
summary(model.slr)
model.slr2 <- lm(formula = Salary ~ agreeableness,
data = train_df)
summary(model.slr2)
model.slr3 <- lm(formula = Salary ~ Quant,
data = train_df)
summary(model.slr3)
savehistory("C:/Users/excellent lap/Desktop/Team-Project-A170/.Rhistory")
model.poly <- lm(formula = Salary ~ openess_to_experience + I(openess_to_experience^2),
data = train_df)
summary(model.poly)
model.mlr1 <- lm(formula = Salary ~ openess_to_experience + agreeableness + extraversion +
Quant + Logical + English + ComputerScience + ElectronicsAndSemicon +
TelecomEngg + MechanicalEngg + ComputerProgramming + ElectricalEngg +
CivilEngg + conscientiousness + extraversion + nueroticism + Domain
,
data = train_df)
model.mlr1
model.int <- lm(formula = Salary ~ openess_to_experience + agreeableness +
openess_to_experience:agreeableness,
data = train_df)
model.int
mymodel <- lm(formula = Salary ~ openess_to_experience + agreeableness + Quant +
I(openess_to_experience^2) + I(agreeableness^2) + I(Quant^2) +
openess_to_experience:agreeableness + openess_to_experience:Quant +
agreeableness:Quant,
data = train_df)
mymodel
savehistory("C:/Users/excellent lap/Desktop/Team-Project-A170/.Rhistory")
##Actual value from test data
actual <- test_df$Salary
## Predicted values using SLR model
pred.slr <- predict(model.slr, test_df)
pred.slr2 <- predict(model.slr2, test_df)
pred.slr3 <- predict(model.slr3, test_df)
pred.poly <- predict(model.poly, test_df)
pred.mlr1 <- predict(model.mlr1, test_df)
pred.int <- predict(model.int, test_df)
pred.mymodel <- predict(mymodel, test_df)
## create dataframe for actual and prediction values
prediction_df <- data.frame(actual, pred.slr, pred.slr2, pred.slr3,
pred.poly, pred.mlr1, pred.int, pred.mymodel)
p1 <- ggplot(data = prediction_df,
aes(x=actual,
y=pred.slr)) +
geom_point() +
geom_smooth() +
scale_x_continuous(limits = c(0, 750000),
breaks = c(250000, 500000, 750000),
labels = c("250000INR", "500000INR", "$750000INR")) +
scale_y_continuous(limits = c(0, 750000),
breaks = c(250000, 500000, 750000),
labels = c("250000INR", "500000INR", "$750000INR")) +
labs(title = "Simple Linear Regression vs Actual (openess_to_experience)")
p1
p2 <- ggplot(data = prediction_df,
aes(x=actual,
y=pred.slr2)) +
geom_point() +
geom_smooth() +
scale_x_continuous(limits = c(0, 750000),
breaks = c(250000, 500000, 750000),
labels = c("250000INR", "500000INR", "$750000INR")) +
scale_y_continuous(limits = c(0, 750000),
breaks = c(250000, 500000, 750000),
labels = c("250000INR", "500000INR", "$750000INR")) +
labs(title = "Simple Linear Regression vs Actual (agreeableness)")
p2
p3 <- ggplot(data = prediction_df,
aes(x=actual,
y=pred.slr3)) +
geom_point() +
geom_smooth() +
scale_x_continuous(limits = c(0, 750000),
breaks = c(250000, 500000, 750000),
labels = c("250000INR", "500000INR", "$750000INR")) +
scale_y_continuous(limits = c(0, 750000),
breaks = c(250000, 500000, 750000),
labels = c("250000INR", "500000INR", "$750000INR")) +
labs(title = "Simple Linear Regression vs Actual (Quant)")
p3
p4 <- ggplot(data = prediction_df,
aes(x=actual,
y=pred.poly)) +
geom_point() +
geom_smooth() +
scale_x_continuous(limits = c(0, 750000),
breaks = c(250000, 500000, 750000),
labels = c("250000INR", "500000INR", "$750000INR")) +
scale_y_continuous(limits = c(0, 750000),
breaks = c(250000, 500000, 750000),
labels = c("250000INR", "500000INR", "$750000INR")) +
labs(title = "Polynomial Regression vs Actual")
p4
p5 <- ggplot(data = prediction_df,
aes(x=actual,
y=pred.mlr1)) +
geom_point() +
geom_smooth() +
scale_x_continuous(limits = c(0, 750000),
breaks = c(250000, 500000, 750000),
labels = c("250000INR", "500000INR", "$750000INR")) +
scale_y_continuous(limits = c(0, 750000),
breaks = c(250000, 500000, 750000),
labels = c("250000INR", "500000INR", "$750000INR")) +
labs(title = "Multivariate Regression vs Actual")
p5
save.image("C:/Users/excellent lap/Desktop/Team-Project-A170/.RData")
savehistory("C:/Users/excellent lap/Desktop/Team-Project-A170/.Rhistory")
p7 <- ggplot(data = prediction_df,
aes(x=actual,
y=pred.mymodel)) +
geom_point() +
geom_smooth() +
scale_x_continuous(limits = c(0, 750000),
breaks = c(250000, 500000, 750000),
labels = c("250000INR", "500000INR", "$750000INR")) +
scale_y_continuous(limits = c(0, 750000),
breaks = c(250000, 500000, 750000),
labels = c("250000INR", "500000INR", "$750000INR")) +
labs(title = "Prediction myModel vs Actual")
p7
multi_plot <- grid.arrange(p1, p2, p3, p4, p5, p6, p7, ncol = 2,
top = "Model Predicition")
multi_plot <- grid.arrange(p1, p2, p3, p4, p5, p7, ncol = 2,
top = "Model Predicition")
savehistory("C:/Users/excellent lap/Desktop/Team-Project-A170/.Rhistory")
save.image("C:/Users/excellent lap/Desktop/Team-Project-A170/.RData")
performance <- function(actual, predicted, model){
# Root Mean Square Error (RMSE)
e <- predicted - actual #error
se <- e^2 # square error
sse <- sum(se) # sum of square error
mse <- mean(se) # mean squared error
rmse <- sqrt(mse) # root mean squared error
## Pearson'sCorrelation Coefficient (R)
r <- cor(predicted, actual)
result <- paste("=== Model: ", model,
"\nRoot Mean Squared Error (RMSE): ", round(rmse, 2),
"\nCorrelation Coefficient (R): ", round(r,5),
"\n\n")
cat(result)
#return (rmse)
}
performance(actual, pred.slr, "Single Regression Openess_to_experience")
performance(actual, pred.slr2, "Single Regression agreeableness")
performance(actual, pred.slr3, "Single Regression Quant")
performance(actual, pred.poly, "Polynominal Regression")
performance(actual, pred.mlr1, "Multivariate Regression")
save.image("C:/Users/excellent lap/Desktop/Team-Project-A170/.RData")
savehistory("C:/Users/excellent lap/Desktop/Team-Project-A170/.Rhistory")
performance(actual, pred.int, "Multivariate Intersaction")
performance(actual, pred.mymodel, "My Model")
# Principal Component Analysis (PCA)
pr.out <- prcomp(salary_df_num, scale = TRUE)
names(pr.out)
## Variant Explained
sdev <- pr.out$sdev
ve <- sdev ^ 2
ve
## Proportion of Variance Explained (PVE)
pve <- ve / sum(ve)
pve
plot(pve,
xlab = "Principal Component",
ylab = "PVE",
type = "b",
ylim = c(0,1))
plot(cumsum(pve),
xlab = "Principal Component",
ylab = "Cumulative PVE",
type = "b",
ylim = c(0,1))
k <- 15
features_df <- pr.out$x[ , 1:k]
features_df <- data.frame( features_df )
pve
cumsum(pve)
### combine features and target
salary_pca_df <- cbind( salary_df_num$Salary, features_df)
colnames(salary_pca_df)[1] <- "salary"
# for reproducible result
set.seed(2021)
## PCA
m <- nrow(salary_pca_df)
m
m_train <- m * 0.7
train_idx <- sample(m, m_train)
train_pca_df <- salary_pca_df[ train_idx, ]
test_pca_df <- salary_pca_df[ -train_idx, ]
save.image("C:/Users/excellent lap/Desktop/Team-Project-A170/.RData")
savehistory("C:/Users/excellent lap/Desktop/Team-Project-A170/.Rhistory")
model.slr_pca <- lm(formula = salary ~ .,
data = train_pca_df)
summary(model.slr_pca)
pred.slr_pca <- predict(model.slr_pca, test_pca_df)
performance(actual, pred.slr_pca, "LR PCA")
## Create dataframe PCA
prediction_df_pca <- data.frame(pred.slr_pca)
## Visualize PCA
pca <- ggplot(data = prediction_df_pca,
aes(x=actual,
y=pred.slr_pca)) +
geom_point() +
geom_smooth() +
scale_x_continuous(limits = c(0, 750000),
breaks = c(250000, 500000, 750000),
labels = c("250000INR", "500000INR", "$750000INR")) +
scale_y_continuous(limits = c(0, 750000),
breaks = c(250000, 500000, 750000),
labels = c("250000INR", "500000INR", "$750000INR")) +
labs(title = "PCA Visualize")
pca
save.image("C:/Users/excellent lap/Desktop/Team-Project-A170/.RData")
savehistory("C:/Users/excellent lap/Desktop/Team-Project-A170/.Rhistory")
